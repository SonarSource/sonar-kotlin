plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

apply plugin: 'org.jetbrains.kotlin.jvm'

dependencies {
    implementation project(':slang-api')
    implementation project(':slang-checks')
    implementation project(':slang-plugin')
    implementation project(':checkstyle-import')
    compileOnly 'org.sonarsource.sonarqube:sonar-plugin-api'
    implementation 'org.sonarsource.analyzer-commons:sonar-analyzer-commons'
    implementation 'org.sonarsource.analyzer-commons:sonar-xml-parsing'
    implementation "org.jetbrains.kotlin:kotlin-compiler-embeddable:${kotlinVersion}"
    implementation 'com.fasterxml.staxmate:staxmate:2.3.1'
    implementation 'com.eclipsesource.minimal-json:minimal-json:0.9.5'
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-migrationsupport"
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.mockk:mockk:1.10.6'
    testImplementation 'io.github.classgraph:classgraph'
    testImplementation 'org.sonarsource.analyzer-commons:sonar-analyzer-test-commons'
    testImplementation project(':slang-antlr')
    testImplementation project(':slang-testing')
}

tasks.withType(JavaCompile) {
    // Prevent warning: Gradle 5.0 will ignore annotation processors
    options.compilerArgs += [ "-proc:none" ]
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

test.dependsOn(project(':kotlin-checks-test-sources').tasks.named('build'))

jar {
    manifest {
        def displayVersion = (project.buildNumber == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.buildNumber})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                // Note that use of ChildFirstClassLoader is deprecated since SonarQube 7.9
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'org.sonarsource.kotlin.plugin.KotlinPlugin',
                'Plugin-Description': 'Code Analyzer for Kotlin',
                'Plugin-Developers': 'SonarSource Team',
                'Plugin-Display-Version': displayVersion,
                'Plugin-Homepage': 'http://redirect.sonarsource.com/plugins/kotlin.html',
                'Plugin-IssueTrackerUrl': 'https://jira.sonarsource.com/browse/SONARKT',
                'Plugin-Key': 'kotlin',
                'Plugin-License': 'GNU LGPL 3',
                'Plugin-Name': 'Kotlin Code Quality and Security',
                'Plugin-Organization': 'SonarSource',
                'Plugin-OrganizationUrl': 'http://www.sonarsource.com',
                'Plugin-SourcesUrl': 'https://github.com/SonarSource/sonar-kotlin',
                'Plugin-Version': project.version,
                'Sonar-Version': '6.7',
                'SonarLint-Supported': 'true',
                'Version': "${project.version}",
        )
    }
}

shadowJar {
    minimize { }
    exclude 'META-INF/native/**/*jansi*'
    exclude 'org/jetbrains/kotlin/org/jline/**'
    exclude 'org/jetbrains/kotlin/net/jpountz/**'
    doLast {
        enforceJarSizeAndCheckContent(shadowJar.archiveFile.get().asFile, 32_000_000L, 33_000_000L)
    }
}

artifacts {
    archives shadowJar
}

artifactoryPublish.skip = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: shadowJar, classifier: null
            artifact sourcesJar
            artifact javadocJar
        }
    }
}
